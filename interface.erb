// DO NOT MODIFY. This file is auto-generated by aidl2 [http://github.com/kennytm/aidl2]
// Original file: <%= path %>

package <%= package %>;

<% imports.each do |type, qname| -%>
<% if type == :import -%>
import <%= qname %>;
<% end -%>
<% end -%>

<%= javadoc %>
public interface <%= name %><%= generic %> extends android.os.IInterface {
    <% methods.each do |method| -%>
    <%= method.javadoc %>
    <%= METHOD_SIGNATURE_ERB.result_of(method, _self) %>;
    <% end -%>

    /** Local-side IPC implementation stub class. */
    public static abstract class Stub<%= generic %> extends android.os.Binder implements <%= name %><%= _self.generic_arguments %> {
        /*internal*/static final String DESCRIPTOR = "<%= package %>.<%= name %>";

        <% if methods.any? {|m| m.modifiers.include?(:mainthread) } %>
        private static enum MainThread {
            INSTANCE(0);

            public final android.os.Handler handler;

            private MainThread(int dummy) {
                handler = new android.os.Handler(android.os.Looper.getMainLooper());
            }
        }
        <% end %>

        /** Construct the stub at attach it to the interface. */
        public Stub() {
            attachInterface(this, DESCRIPTOR);
        }

        /**
         * Cast an IBinder object into an <%= name %> interface, generating a proxy if needed.<% if generic %>
         *
         * <p>Note that this method will not check if the converted interface really use the provided generic arguments.
         * Passing the wrong types will cause ClassCastException in the server in random places. Please check the
         * interface documentation for what arguments are expected.
         */
        @SuppressWarnings("unchecked")<% else %>
         */<% end %>
        public static <%= generic %> <%= name %><%= _self.generic_arguments %> asInterface(final android.os.IBinder obj) {
            if (obj == null) {
                return null;
            }
            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
            if (iin instanceof <%= name %>) {
                return (<%= name %><%= _self.generic_arguments %>) iin;
            } else {
                return new Proxy<%= _self.generic_arguments %>(obj);
            }
        }

        @Override
        public final android.os.IBinder asBinder() {
            return this;
        }

        @Override
        public final boolean onTransact(final int code,
                                        final android.os.Parcel data,
                                        final android.os.Parcel reply,
                                        final int flags) throws android.os.RemoteException {
            switch (code) {
            default:
                return super.onTransact(code, data, reply, flags);
            case INTERFACE_TRANSACTION:
                reply.writeString(DESCRIPTOR);
                return true;
            <% methods.each do |method| reset_index %>
            case FIRST_CALL_TRANSACTION + <%= method.i %>: { // <%= method.name %>
                data.enforceInterface(DESCRIPTOR);
                <%= TRANSACTION_ERB.result_of(method, _self).indent(16) %>
                return true;
            }
            <% end %>
            }
        }

        private static final class Proxy<%= generic %> implements <%= name %><%= _self.generic_arguments %> {
            private final android.os.IBinder mRemote;

            /*internal*/Proxy(final android.os.IBinder remote) {
                mRemote = remote;
            }

            @Override
            public android.os.IBinder asBinder() {
                return mRemote;
            }
            <% methods.each do |method| reset_index %>
            @Override
            <%= METHOD_SIGNATURE_ERB.result_of(method, _self) %> {
                <%= PROXY_ERB.result_of(method, _self).indent(16) %>
            }
            <% end %>
        }
    }
}
